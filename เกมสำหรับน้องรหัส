<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>4x4 Puzzle Game</title>
  <style>
    * { box-sizing: border-box; }
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      margin: 0;
      padding: 10px;
      background: #f0f0f0;
      font-family: sans-serif;
    }
    .game-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      margin-bottom: 20px;
    }
    .puzzle {
      width: 90vmin;
      height: 90vmin;
      max-width: 400px;
      max-height: 400px;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      grid-template-rows: repeat(4, 1fr);
      gap: 2px;
    }
    .tile {
      background-image: url('https://i.postimg.cc/WbSsG8rt/Screenshot-20250611-092710.jpg');
      background-size: 400% 400%;
      cursor: pointer;
    }
    .empty {
      background: white !important;
      cursor: default;
    }
    button {
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      margin: 5px;
    }
    @media (max-width: 500px) {
      button {
        font-size: 14px;
        padding: 8px 16px;
      }
    }
    .preview {
      width: 150px;
      height: 150px;
      object-fit: cover;
      border: 2px solid #333;
    }
    .message {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 22px;
      color: green;
      background: rgba(255, 255, 255, 0.9);
      padding: 20px 30px;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0,0,0,0.2);
      text-align: center;
      z-index: 999;
      display: none;
      max-width: 80vw;
      word-wrap: break-word;
    }
  </style>
</head>
<body>
  <div class="game-container">
    <img src="https://i.postimg.cc/WbSsG8rt/Screenshot-20250611-092710.jpg" alt="‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á" class="preview"/>
    <div class="puzzle" id="puzzle"></div>
  </div>
  <button onclick="shuffle()">‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>
  <button onclick="giveUp()">‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ</button>
  <div id="message" class="message"></div>

  <script>
    const puzzle = document.getElementById('puzzle');
    const message = document.getElementById('message');
    const size = 4;
    const totalTiles = size * size;
    let order = [...Array(totalTiles).keys()];
    let emptyIndex = totalTiles - 1;

    function render() {
      puzzle.innerHTML = '';
      order.forEach((tileNum, i) => {
        const tile = document.createElement('div');
        tile.className = 'tile';
        if (tileNum === totalTiles - 1) {
          tile.classList.add('empty');
        } else {
          const x = tileNum % size;
          const y = Math.floor(tileNum / size);
          tile.style.backgroundPosition = `${(x / (size - 1)) * 100}% ${(y / (size - 1)) * 100}%`;
        }
        tile.addEventListener('click', () => tryMove(i));
        puzzle.appendChild(tile);
      });
      checkWin();
    }

    function tryMove(index) {
      const dx = Math.abs(index % size - emptyIndex % size);
      const dy = Math.abs(Math.floor(index / size) - Math.floor(emptyIndex / size));
      if (dx + dy === 1) {
        [order[index], order[emptyIndex]] = [order[emptyIndex], order[index]];
        emptyIndex = index;
        render();
      }
    }

    function shuffle() {
      do {
        order = [...Array(totalTiles).keys()];
        for (let i = totalTiles - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [order[i], order[j]] = [order[j], order[i]];
        }
        emptyIndex = order.indexOf(totalTiles - 1);
      } while (!isSolvable(order));

      message.style.display = 'none';
      render();
    }

    function isSolvable(arr) {
      let invCount = 0;
      for (let i = 0; i < totalTiles - 1; i++) {
        for (let j = i + 1; j < totalTiles; j++) {
          if (arr[i] !== totalTiles - 1 && arr[j] !== totalTiles - 1 && arr[i] > arr[j]) {
            invCount++;
          }
        }
      }
      const emptyRow = Math.floor(arr.indexOf(totalTiles - 1) / size);
      return (invCount + emptyRow) % 2 === 0;
    }

    function checkWin() {
      for (let i = 0; i < totalTiles; i++) {
        if (order[i] !== i) return;
      }
      message.textContent = '‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: üéµüéµüéµ';
      message.style.display = 'block';
    }

    function giveUp() {
      message.textContent = '‡πÑ‡∏°‡πà‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ã‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏´‡∏£‡∏≠ ‡∏ä‡∏±‡∏á‡∏°‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâüéµüéµüéµ';
      message.style.display = 'block';
    }

    shuffle();
  </script>
</body>
</html>
